
Praktikum 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a9  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f7  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d2  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000058  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0c d0       	rcall	.+24     	; 0x4c <main>
  34:	11 c0       	rjmp	.+34     	; 0x58 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <leftShift>:

void leftShift() {
	unsigned char value = (0x01);
	
	while(value != 8) {
		PORTB = value;
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	88 bb       	out	0x18, r24	; 24
  3c:	82 e0       	ldi	r24, 0x02	; 2
  3e:	88 bb       	out	0x18, r24	; 24
  40:	84 e0       	ldi	r24, 0x04	; 4
  42:	88 bb       	out	0x18, r24	; 24
  44:	08 95       	ret

00000046 <rightShift>:

void rightShift() {
	unsigned char value = 2;
	
	while (value != 1) {
		PORTB = value;
  46:	82 e0       	ldi	r24, 0x02	; 2
  48:	88 bb       	out	0x18, r24	; 24
  4a:	08 95       	ret

0000004c <main>:
#define F_CPU 32000000UL
#include <util/delay.h>


int main(void) {
    DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); //Alle Ports auf Output setzen
  4c:	87 b3       	in	r24, 0x17	; 23
  4e:	87 60       	ori	r24, 0x07	; 7
  50:	87 bb       	out	0x17, r24	; 23
	
    while (1) {
		leftShift();
  52:	f2 df       	rcall	.-28     	; 0x38 <leftShift>
		rightShift();
  54:	f8 df       	rcall	.-16     	; 0x46 <rightShift>
  56:	fd cf       	rjmp	.-6      	; 0x52 <main+0x6>

00000058 <_exit>:
  58:	f8 94       	cli

0000005a <__stop_program>:
  5a:	ff cf       	rjmp	.-2      	; 0x5a <__stop_program>
